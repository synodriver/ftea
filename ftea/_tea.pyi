class TEA:
    key: bytes = ...
    @classmethod
    def __init__(self, key: bytes) -> None: ...
    def decrypt(self, text: bytes, sumtable: bytes) -> bytes: ...
    def decrypt_into(self, text: bytes, sumtable: bytes, out: bytearray) -> int: ...
    def decrypt_native_endian(self, text: bytes, sumtable: bytes) -> bytes: ...
    def decrypt_native_endian_into(self,text: bytes, sumtable: bytes, out: bytearray) -> int: ...
    def decrypt_qq(self, text: bytes) -> bytes: ...
    def decrypt_qq_into(self, text: bytes, out: bytearray) -> int: ...
    def encrypt(self, text: bytes, sumtable: bytes) -> bytes: ...
    def encrypt_into(self, text: bytes, sumtable: bytes, out: bytearray) -> int: ...
    def encrypt_native_endian(self, text: bytes, sumtable: bytes) -> bytes: ...
    def encrypt_native_endian_into(self, text: bytes, sumtable: bytes, out: bytearray) -> int: ...
    def encrypt_qq(self,  text: bytes) -> bytes: ...
    def encrypt_qq_into(self, text: bytes, out: bytearray) -> int: ...

def encrypt_len(src: int) -> int: ...